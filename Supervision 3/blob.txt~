package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public class Action {
	/*
	 * Not a true class, more of a strucutre. contains PET_INDEX;  ACTION_TYPE
	 * */
	
	public final int 	PET_INDEX;
	public final String ACTION_TYPE;
	public final String PET_NAME;
	public Action(int newIndex, String newType){
		PET_INDEX = newIndex;
		ACTION_TYPE= newType;
		PET_NAME = null;
	}

	public Action(String newPetName,String newType){
		PET_INDEX = -1;
		ACTION_TYPE= newType;
		PET_NAME = newPetName;
	}
	//DONE
}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public class Carrot extends Meal {
	public Carrot(){
		super (20);
	}
	
	public String toString(){
		return "Carrot";
	}
	//DONE
}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public class ChocolateBar extends Meal {
	
	public ChocolateBar(){
		super (100);
	}
	
	@Override
	public String toString(){
		return "Chocolate Bar";		
	}
	//DONE
}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class CommandLineInterface implements UserInterface {

	private BufferedReader c = new BufferedReader(new InputStreamReader(System.in));
	private Game game;
	
	//--------------------------------------------------------------------------
	
	public CommandLineInterface (Game newGame){
		game = newGame;
	}

	@Override
	public String getPlayerName() {
		System.out.format("%n-------------------%nPlease Type in Your Name %n -> ");
		try {
			return 	c.readLine();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Pet[] getPlayerPets() {
		Pet[] pets = new Pet[Game.SUPPORTED_PETS];
		String petType=new String();
		String petName=new String();
		for(int i=0;i<Game.SUPPORTED_PETS;i++){
			System.out.print("Please Choose type of pet_"+i+" -> "); //Would look better in Latex
			try {
				petType = c.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.out.print("How would you like to name your pet -> ");
			try {
				petName = c.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			pets[i] = parseToPet(petType, petName);
			
			//DEBUG
			System.out.println("Created "+ pets[i]);
		}
		return pets;
	}

	private Pet parseToPet(String petType,String petName) {
		switch (petType.toLowerCase().trim()){

		case "kung fu":
		case "kungfu":
		case "ninja":
		case "panda":
			return new KungFuPanda(petName,game);
		case "fish":
		case "fishie":
		case "fisher":
		case "aquarium":
			return new Fish(petName,game);
		case "dog":
		case "doge":
		case "doggie":
		default:
			return new Dog(petName,game);
		}
	}

	private Meal parseToMeal(String mealName){
		switch (mealName.toLowerCase()){
		case "snickers":
		case "mars":
		case "bounty":
		case "treat":
		case "chocolate":
			return new ChocolateBar();
		case "carrot":
		case "veg":
		case "vegetable":
			return new Carrot();
		case "cracker":
		case "food":
		case "default":
		default:
			return new Cracker();
		}
	}

	@Override
	public Action actionPrompt() {
		System.out.format("Please Specify what you want to do:%n"
				+ "[Action Keyword] [Pet Number]%n%n");
		String[] input;
		try {
			input = c.readLine().split(" ");
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
		int petIndex = 0;//Defaults to 0;
		while(input.length<2){
			System.out.println("Invalid input. Should be [Action Keyword] [Pet Number]");
			try {
				input = c.readLine().split(" ");
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		try{
			petIndex = Integer.parseInt(input[1]);
			if(petIndex<0){
				throw new NumberFormatException();
			}
		}catch(NumberFormatException error){
			return new Action(input[1],input[0]);
		}

		//Action String Recognition should be in the Act Method


		return new Action(petIndex, input[0]) ;
	}

	@Override
	public boolean continuePrompt() {
		System.out.println("Would you like to quit?");
		String input=new String();
		try {
			input = c.readLine();
		} catch (IOException e) {
			e.printStackTrace();
		}
		switch (input.toLowerCase()){
		case "yes":
		case "oui":
		case "yup":
		case "y":
		case "yeah I'd like to quit, please":
			return false;
		default:
			return true;
		}
	}

	@Override
	public Meal feedPrompt(){
		//In future would allow to select what to feed. now feeds 
		//the last thing on the list.
		System.out.println("What would you like to feed?");
		try {
			return parseToMeal(c.readLine());
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}


	}
	

}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

import java.io.Console;


public class ConsoleCommandLineInterface implements UserInterface {

	private Console c =System.console();
	
	private Game game;

	//--------------------------------------------------------------------------

	public ConsoleCommandLineInterface (Game newGame){
		game = newGame;
	}
	public ConsoleCommandLineInterface(){
		try{
			c = System.console();
			if(c==null){
				throw new NullPointerException("This is silly"); 
			}//Returns Null in every instance
		}catch (NullPointerException e){
			System.out.println(e.getMessage());
		}
	}


	@Override
	public String getPlayerName() {
		System.out.println("Please Type in the User Name ");
		return 	c.readLine();
	}

	@Override
	public Pet[] getPlayerPets() {
		Pet[] pets = new Pet[Game.SUPPORTED_PETS];
		String petType;
		String petName;
		for(int i=0;i<Game.SUPPORTED_PETS;i++){
			System.out.println("Please Choose type of pet_"+i); //Would look better in Latex
			petType = c.readLine();
			System.out.println("How would you like to name your pet");
			petName = c.readLine();
			pets[i] = parseToPet(petType, petName);
		}
		return pets;
	}

	private Pet parseToPet(String petType,String petName) {
		switch (petType.toLowerCase()){

		case "kung fu":
		case "kungfu":
		case "ninja":
		case "panda":
			return new KungFuPanda(petName,game);
		case "fish":
		case "fishie":
		case "fisher":
		case "aquarium":
			return new Fish(petName,game);
		case "dog":
		case "doge":
		case "doggie":
		default:
			return new Dog(petName,game);
		}
	}

	private Meal parseToMeal(String mealName){
		switch (mealName.toLowerCase()){
		case "snickers":
		case "mars":
		case "bounty":
		case "treat":
		case "chocolate":
			return new ChocolateBar();
		case "carrot":
		case "veg":
		case "vegetable":
			return new Carrot();
		case "cracker":
		case "food":
		case "default":
		default:
			return new Cracker();
		}
	}

	@Override
	public Action actionPrompt() {
		System.out.format("Please Specify what you want to do:%n"
				+ "[Action Keyword] [Pet Number]%n%n");
		String[] input = c.readLine().split(" ");
		int petIndex = 0;//Defaults to 0;
		while(input.length<2){
			System.out.println("Invalid input. Should be [Action Keyword] [Pet Number]");
			input = c.readLine().split(" ");
		}
		try{
			petIndex = Integer.parseInt(input[1]);
			if(petIndex<0){
				throw new NumberFormatException();
			}
		}catch(NumberFormatException error){
			System.out.print("Invalid Input.");
			System.out.println("Second argument should be a "
					+ "positive integer "+input[1]+" given." );
		}

		//Action String Recognition should be in the Act Method


		return new Action(petIndex, input[0]) ;
	}

	@Override
	public boolean continuePrompt() {
		System.out.println("Would you like to quit?");
		String input = c.readLine();
		switch (input.toLowerCase()){
		case "yes":
		case "oui":
		case "yup":
		case "y":
		case "yeah I'd like to quit, please":
			return false;
		default:
			return true;
		}
	}

	@Override
	public Meal feedPrompt(){
		//In future would allow to select what to feed. now feeds 
		//the last thing on the list.
		System.out.println("What would you like to feed?");
		return parseToMeal(c.readLine());


	}
	public static void main(String[] args){
		ConsoleCommandLineInterface ui = new ConsoleCommandLineInterface();
		System.out.println(ui.c.readLine());
	}

}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public class Cracker extends Meal {
	public Cracker (){
		super (5);
	}
	
	public String toString(){
		return "Cracker";
	}
	//DONE
}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public interface CyberPet {
	public void feed(Meal m);
	public void sleep(); 
	public void respond();
	public void play();
	public void update();
	//DONE
}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public class Dog extends Pet {

	public Dog(String newName,Game newGame){
		super(newName,newGame);
	}

	@Override
	public void play() {
		if(fatigue<=70){
			System.out.println("My FLuffy Friend "+ this.NAME+" Wants to play?");
			try{
				Thread.sleep(2000);
			}catch (InterruptedException e) {
				e.printStackTrace();
			}finally{		
				System.out.println("												");
				System.out.println("                             _					");
				System.out.println("                          ,:'/   _..._			");
				System.out.println("                         // ( `~~-.._.'			");
				System.out.println("                         \\| /    6\\___          ");
				System.out.println("                         |     6      4         ");
				System.out.println("                        |            /          ");
				System.out.println("                         \\_       .--'          ");
				System.out.println("                         (_'---'`)              ");
				System.out.println("                         / `'---`()             ");
				System.out.println("                       ,'        |              ");
				System.out.println("       ,            .'`          |              ");
				System.out.println("       )\\       _.-'             ;              ");
				System.out.println("      / |    .'`   _            /               ");
				System.out.println("    /` /   .'       '.        , |               ");
				System.out.println("   /  /   /           \\   ;   | |               ");
				System.out.println("   |  \\  |            |  .|   | |               ");
				System.out.println("    \\  `~|           /.-' |   | |               ");
				System.out.println("     '-..-\\       _.;.._  |   |.;-.             ");
				System.out.println("           \\    <`.._  )) |  .;-. ))            ");
				System.out.println("           (__.  `  ))-'  \\_    ))'             ");
				System.out.println("               `'--@`  jgs  `~~~               ");
				System.out.println("                                                ");
				System.out.println("                                                ");
				System.out.println("                                                ");
				System.out.println("                                                ");
				System.out.println("                                                ");
				System.out.println("                                                ");
			}
			this.fatigue+=23;
			//Dogs are generally eager pets;
		}
		else{
			System.out.println("I'm too tired to play... Woof!");
		}
	}                                                                       
                                                                            
	@Override                                                               
	public void sleep() {
		System.out.print("Even The Eager souls of Dogs sometimes get tired");
		System.out.print(".");
		this.fatigue= 0;		
		try{
			Thread.sleep(500);
			System.out.print(".");
			this.satiation+=10;//So that a dog doesn't die in its sleep
			Thread.sleep(500);
			System.out.println(".");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}

	@Override
	public String toString(){
		return "Dog, named " +NAME; 
	}
}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public class Fish extends Pet {

	public Fish(String newName,Game newGame){
		super(newName,newGame);
	}

	@Override
	public void play() {
		if(fatigue<=70){
			System.out.println("You sure are fun to watch, "+ this.NAME+".");
			try{
				Thread.sleep(2000);
			}catch (InterruptedException e) {
				e.printStackTrace();
			}finally{		
				System.out.println("     .--~~```                 ```~~--.		");
				System.out.println("            ':--..___             ___..--:'		");
				System.out.println("              \\      ```~~~~~~~```      /		");
				System.out.println("            .-`  ___.....-----.....___  '-.		");
				System.out.println("          .:-~~``     ~          ~    ``~~-:.         ");
				System.out.println("         /`-..___ ~        ~         ~___..-'\\       ");
				System.out.println("        /  ~    '`-----.........---\"\"`        \\       ");
				System.out.println("       ;                                       ;        ");
				System.out.println("      ; '::.   '          _,           _,       ;       ");
				System.out.println("      |   ':::    '     .' (    ~   .-'./    ~  |       ");
				System.out.println("      |~  .:'   .     _/..._'.    .'.-'/        |       ");
				System.out.println("      | .:'       .-'`      ` '-./.'_.'         |       ");
				System.out.println("      |  ':.     ( o)   ))      ;= <_           |        ");
				System.out.println("      ; '::.      '-.,\\\\__ __.-;`\'. '.  .      ;       ");
				System.out.println("       ;    ':         \\) |`\\ \\)  '.'-.\\       ;       ");
				System.out.println("        \\.:'.:':.         \\_/       '-._\\     /        ");
				System.out.println("         \\ ':.     ~                    `    /        ");
				System.out.println("          '. '::..  _ . - - -- .~ _      ~ .'        ");
				System.out.println("            '-._':'                 `'-_.-'        ");
				System.out.println("        jgs    (``''--..._____...--''``)        ");
				System.out.println("                `\"--...__     __...--\"`        ");
				System.out.println("                         `````      			");
				System.out.println("       											");
		
			}
			this.fatigue+=11;
			//Fish don't play you just observe them
		}
		else{
			System.out.println("Gzrp... I need some sleep!");
		}

	}

	@Override
	public void sleep() {
		System.out.print("Surprisingly fish sleep too");
		System.out.print(".");
		this.fatigue= 0;		
		try{
			Thread.sleep(500);
			System.out.print(".");
			//this.satiation+=10; 
			//A fish on the other hand can very well die in its sleep
			Thread.sleep(500);
			System.out.println(".");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}

	public String toString(){
		return NAME + " the Fish";
	}
}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

import java.util.Iterator;


public class Game {

	public static final int  SUPPORTED_PETS=3;
	private Player p;	//Could make an array in the future
	private UserInterface ui;

	public UserInterface getUi() {
		return ui;
	}

	public void setUi(UserInterface ui) {
		this.ui = ui;
	}

	public Game(){
		ui = new CommandLineInterface(this);
		Pet[] pets=	ui.getPlayerPets();
		p = new Player(ui.getPlayerName(),pets,this);
	}

	public Player getPlayer(){
		return p;
	}

	public int getSupportedPets() {
		return SUPPORTED_PETS;
	}

	public static void main(String[] args){
		Game g = new Game();		
		//calls the constructor and creates a player. Plus SOme additional Maintenance
		//The class is structured in such a way taht you could create an array of games
		//and run all of them on different threads, all witgh their own player. 
		//IF you want to there could be multiple players in a single game, in that case 
		//there's no intersection between Different players' pets.
		do{
			try{
				g.getPlayer().act(g.getUi().actionPrompt());
			}catch(ArrayIndexOutOfBoundsException error){
				System.out.println("AN error occurred. retrying.");
				continue;
			}
			Iterator<Pet> it = g.getPlayer().getPets().values().iterator();
			while(it.hasNext()){
				Pet p = (Pet)it;
				p.update();
			}
			

		}while(g.getUi().continuePrompt());

	}

}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public class KungFuPanda extends Pet {

	public KungFuPanda(String newName,Game newGame){
		super(newName,newGame);
	}

	@Override
	public void play() {
		if(fatigue<=20){
			System.out.println("You sure are fun to watch, "+ this.NAME+".");
			try{
				Thread.sleep(2000);
			}catch (InterruptedException e) {
				e.printStackTrace();
			}finally{		
				
				System.out.println("░░░░░░░░██░▀▀▀▀▄██▄░░░░░░░░░░░░░ "); 
				System.out.println("██▄░░░░░█░░░░░░▀▀▀▄░░░░░░░░░░░░░ "); 
				System.out.println("░█▀▄▄░░█▀▄░░▄░░░░░█░░░░░░░░▄▄▄██ "); 
				System.out.println("░█▄▄▄▀█▀█▀░▀██░░░█▄█▄░░░▄█████▀▀ "); 
				System.out.println("▀█▄████▄░▄▄░░░░▄▄████████████▀░░ ");
				System.out.println("░▀██████▄▄▄▄▄██████████████▄█░░░ "); 
				System.out.println("░░░▀█████████████████████▀▀░░░░░ "); 
				System.out.println("░░░░░▀▀██████████████▀▀░░░░░░░░░ ");
				System.out.println("░░░░░░░█▀▀▀▀▀░░▀░░░▀█░░░░░░░░░░░ ");
				System.out.println("░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░ ");
				System.out.println("░░░░░█░░░░░░░░░░░░░░░█░░░░░░░░░░ ");
				System.out.println("░░░░░█░░░░░░░░░░░░░░░█░░░░░░░░░░ ");
				System.out.println("░░░▄████▄▄░░░░░░░░░░██░░░░░░░░░░ ");
				System.out.println("░░▄████████░░░░░░░▄███░░░░░░░░░░ ");  
				System.out.println("░░█████████▄▄▄▄███████░░░░░░░░░░ "); 
		        System.out.println("░░███████░░░░░░████████░░░░░░░░░ "); 
		        System.out.println("░░▀▀█████░░░░░░░▀▀████▀░░░░░░░░░ "); 
		        //Kung fu Panda, sorry, no Ninja warrior on the net
			}                         
			this.fatigue+=80;         
		}   //A KungFuPanda really has to wear itself out                      　　　　　
		else{                                                  
			System.out.format("What. No no more bamboo mommy! %n"
					+ "I don't want to go to school%n");  
		}                                                      
		                                                       
		                                                       

	}

	@Override
	public void sleep() {
		System.out.print("Pandas need more sleep");
		System.out.print(".");
		this.fatigue= 0;		
		try{
			Thread.sleep(500);
			System.out.print(".");
			//this.satiation+=10; 
			//A fish on the other hand can very well die in its sleep
			Thread.sleep(500);
			System.out.print(".");
			for(int i=0;i<4;i++){
				Thread.sleep(500);System.out.print(".");
			}			
			System.out.println();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}
	
	public String toString(){
		return "Master "+NAME;
	}

}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public abstract class Meal  {
	private int VALUE; 	//Intrinsically immutable therefore constant
	
	protected Meal(int newValue){
		VALUE = newValue;	//Shouldn't be able to create uncreative meals
							//Don't have default appearance, name therefore 
	}
	//------------------------
	public int getNutrientValue(){
		return VALUE;
	}
	//DONE
}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public abstract class Pet implements CyberPet{
	
	protected Game game;
	protected final String NAME;
	protected int fatigue = 30;
	protected int satiation = 100;
	
	//-----------------------------------------
	

	
	public Pet (String newName,Game newGame){
		NAME = newName;
		game = newGame;
	}
	
	@Override
	public void feed(Meal m) {
		if(satiation >100){
			System.out.println("The Poor "+ this+" seems to be full");
		}else if(satiation>60){
			System.out.println(this + " happily eats the "+ m.toString().toLowerCase());
		}else if(satiation>0){
			System.out.println(NAME + " seems to be extremely hungry.");
		}else{
			System.out.println("It's no use feeding a dead pet.");
		}
		
	}
	
	@Override
	public abstract void play();

	@Override
	public void respond(){
		String tired =fatigue>50? " tired and sleepy":" Ready to play";
		String conjunctor;
		String hungry;
		if(satiation >100){
			hungry = " overfed";
			conjunctor = fatigue>50?" as well as":" but";
		}else if(satiation>60){
			hungry = " well nourished";
			conjunctor = fatigue>50?" though":" and";
		}else if(satiation>0){
			hungry = " hungry";	 
			conjunctor = fatigue>50?" as well":" and definitely not";
		}else{
			System.out.println("A dead pet cannot speak.");
			return;
		}
		System.out.println("Hi, "+game.getPlayer().getName()+"! I'm currently"+hungry+conjunctor+tired);
	}
	
	@Override
	public abstract void sleep();
	
	public void update(){
		satiation-=3;
		fatigue+=4;		
	}
		
	//DONE
		
	}
	


package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

import java.util.HashMap;

public class Player {
	private String name;
	private Game game;
	private String[] petNames;
	private HashMap<String,Pet> pets=new HashMap<String,Pet>();	
	//At this point support only three pets.
	
	//--------------------------------------------------
	public Player (String newName, Pet[] newPets, Game newGame){
		//Want to avoid passing the reference. 
		game = newGame;
		petNames = new String[Game.SUPPORTED_PETS];
		setName(newName);
		try{
		for(int i=0;i<newPets.length;i++){
			petNames[i]=new String(newPets[i].NAME);
			pets.put(newPets[i].NAME, newPets[i]);
		}
		}catch (IndexOutOfBoundsException error){
			System.out.println("Internal error::");
		}
		
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void act (Action predicate){
		UserInterface ui = game.getUi();
		String petName = predicate.PET_NAME==null?petNames[predicate.PET_INDEX]:predicate.PET_NAME;
		if(!pets.containsKey(petName )){
			throw new IndexOutOfBoundsException();
		}
		else{
		switch (predicate.ACTION_TYPE.toLowerCase().trim()){
		case "play":
			pets.get(petName).play();
			break;
		case "feed":
			pets.get(petName).feed(ui.feedPrompt());
			break;
		case "sleep":
		case "let be":
			pets.get(petName).sleep();
			break;
		case "status":
		case "check":
			pets.get(petName).respond();
			break;
		default:
				System.out.println("Unrecognised action. Defaulting to update");
		}
		}
		
	}
	
	public HashMap<String,Pet> getPets() {
		return pets;
	}


	//Done
}
package uk.ac.cam.ap886.oopjava.supervision.cyberPet;

public interface UserInterface {
	public String 	getPlayerName();
	public Pet[] 	getPlayerPets();
	public Action 	actionPrompt();
	public boolean 	continuePrompt();
	public Meal 	feedPrompt();
	//Done
}
